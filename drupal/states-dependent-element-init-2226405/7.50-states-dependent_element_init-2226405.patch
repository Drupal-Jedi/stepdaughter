diff --git a/docroot/misc/states.js b/docroot/misc/states.js
index 5aac65d..4d47a52 100644
--- a/docroot/misc/states.js
+++ b/docroot/misc/states.js
@@ -105,13 +105,20 @@ states.Dependent.prototype = {
         // Initialize the value of this state.
         this.values[selector][state.name] = null;
 
-        // Monitor state changes of the specified state for this dependee.
-        $(selector).bind('state:' + state, $.proxy(function (e) {
-          this.update(selector, state, e.value);
-        }, this));
+        var $dependee = $(selector);
+        if ($dependee.length) {
+          $dependee.bind('state:' + state, $.proxy(function (e) {
+            this.update(selector, state, e.value);
+          }, this));
+        }
 
         // Make sure the event we just bound ourselves to is actually fired.
-        new states.Trigger({ selector: selector, state: state });
+        new states.Trigger({selector: selector, state: state});
+
+        // Update initial state value, if set by data attribute.
+        if ($dependee.data().hasOwnProperty('trigger:' + state.name)) {
+          this.values[selector][state.name] = $dependee.data('trigger:' + state.name);
+        }
       }
     }
   },
@@ -306,11 +313,7 @@ states.Trigger = function (args) {
   if (this.state in states.Trigger.states) {
     this.element = $(this.selector);
 
-    // Only call the trigger initializer when it wasn't yet attached to this
-    // element. Otherwise we'd end up with duplicate events.
-    if (!this.element.data('trigger:' + this.state)) {
-      this.initialize();
-    }
+    this.initialize();
   }
 };
 
@@ -337,8 +340,9 @@ states.Trigger.prototype = {
   defaultTrigger: function (event, valueFn) {
     var oldValue = valueFn.call(this.element);
 
-    // Attach the event callback.
-    this.element.bind(event, $.proxy(function (e) {
+    // Detach possibly earlier attached event callback using event namespacing
+    // and attach a new event callback.
+    this.element.unbind(event + '.statesDefaultTrigger').bind(event + '.statesDefaultTrigger', $.proxy(function (e) {
       var value = valueFn.call(this.element, e);
       // Only trigger the event if the value has actually changed.
       if (oldValue !== value) {
